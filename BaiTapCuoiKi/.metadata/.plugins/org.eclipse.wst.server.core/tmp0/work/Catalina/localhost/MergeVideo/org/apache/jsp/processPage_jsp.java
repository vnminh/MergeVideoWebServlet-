/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-12-03 16:23:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class processPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
int pID = (int)request.getSession(false).getAttribute("pID"); 
      out.write("\r\n");
      out.write("	<h1>Progress<label for=\"pID\">");
      out.print(pID );
      out.write("</label> is going on</h1>\r\n");
      out.write("	<label>Merge </label>\r\n");
      out.write("	<progress id = \"progressBarMerge\" value = \"0\" max = \"100\"></progress>\r\n");
      out.write("	<label id = \"progressTextMerge\">0%</label><br>\r\n");
      out.write("	<label>HD </label>\r\n");
      out.write("	<progress id = \"progressBarHD\" value = \"0\" max = \"100\"></progress>\r\n");
      out.write("	<label id = \"progressTextHD\">0%</label>\r\n");
      out.write("	<div id=\"downloadForm\" style=\"display:none\">\r\n");
      out.write("		<h3>MERGE SUCCESSFUL</h3>\r\n");
      out.write("		<form action=\"DownloadServlet\" method =\"post\">\r\n");
      out.write("			<input type = \"hidden\" name = \"processID\" value = \"");
      out.print(pID );
      out.write("\">\r\n");
      out.write("			<input type = \"submit\" value = \"Download\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("    const pid = document.querySelector(\"label[for='pID']\").textContent;\r\n");
      out.write("	const progressBarMerge = document.getElementById(\"progressBarMerge\");\r\n");
      out.write("	const progressTextMerge = document.getElementById(\"progressTextMerge\");\r\n");
      out.write("	const progressBarHD = document.getElementById(\"progressBarHD\");\r\n");
      out.write("	const progressTextHD = document.getElementById(\"progressTextHD\");\r\n");
      out.write("    const downloadForm = document.getElementById(\"downloadForm\");\r\n");
      out.write("    var intervalID = setInterval(()=>{\r\n");
      out.write("        fetch(\"http://localhost:8080/MergeVideo/MergeVideoServlet?pID=\"+pid)\r\n");
      out.write("        .then(response=>{\r\n");
      out.write("            return response.json();\r\n");
      out.write("        })\r\n");
      out.write("        .then(data=>{\r\n");
      out.write("            const progressMerge = data.progressMerge;\r\n");
      out.write("            const progressHD = data.progressHD;\r\n");
      out.write("            progressBarMerge.value = Math.round(progressMerge*100)/100;\r\n");
      out.write("            progressBarHD.value = Math.round(progressHD*100)/100;\r\n");
      out.write("            progressTextMerge.textContent = \"\"+progressMerge+\"%\";\r\n");
      out.write("            progressTextHD.textContent = \"\"+progressHD+\"%\";\r\n");
      out.write("            if (Math.abs(progressMerge-100)<1e-6 && Math.abs(progressHD-100)<1e-6){\r\n");
      out.write("                clearInterval(intervalID);\r\n");
      out.write("                downloadForm.style = \"display:block\";\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    },500)\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
