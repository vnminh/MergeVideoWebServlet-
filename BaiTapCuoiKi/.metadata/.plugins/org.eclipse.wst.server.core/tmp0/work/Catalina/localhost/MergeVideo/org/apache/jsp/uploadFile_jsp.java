/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-12-03 15:43:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Random;
import java.util.random.RandomGenerator;
import model.bean.Account;

public final class uploadFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.random.RandomGenerator");
    _jspx_imports_classes.add("model.bean.Account");
    _jspx_imports_classes.add("java.util.Random");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	Random ran = new Random();
	Account account = new Account("user"+ran.nextInt(),"lvnminh");
	request.getSession().setAttribute("account", account);
	
      out.write("\r\n");
      out.write("	<h3>CHOOSE VIDEOS TO MERGE</h3>\r\n");
      out.write("	<form id=\"uploadForm\" action = \"UploadServlet\" method = \"post\" enctype = \"multipart/form-data\">\r\n");
      out.write("		<input type = \"file\" name = \"filename\" multiple><br>\r\n");
      out.write("		<input type = \"submit\" value = \"upload\">\r\n");
      out.write("	</form>\r\n");
      out.write("	<div id=\"progressInfo\" style =\"display:none\">\r\n");
      out.write("		<progress id=\"progressBar\" value=\"0\" max = \"100\"></progress>\r\n");
      out.write("		<label id = \"progressText\">Uploading to server</label>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div id=\"mergeForm\" style=\"display:none\">\r\n");
      out.write("		<h3>UPLOAD SUCCESSFUL</h3>\r\n");
      out.write("		<form action=\"MergeVideoServlet\" method =\"post\">\r\n");
      out.write("			<input type = \"hidden\" id=\"processID\" name=\"pID\">\r\n");
      out.write("			<input type = \"submit\" value = \"MERGE\">\r\n");
      out.write("			\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script module>\r\n");
      out.write("const uploadForm = document.getElementById('uploadForm');\r\n");
      out.write("const progressBar = document.getElementById('progressBar');\r\n");
      out.write("const progressText = document.getElementById('progressText');\r\n");
      out.write("const progressInfo = document.getElementById('progressInfo');\r\n");
      out.write("const mergeForm = document.getElementById('mergeForm');\r\n");
      out.write("const processID = document.getElementById('processID');\r\n");
      out.write("uploadForm.addEventListener('submit', function (e) {\r\n");
      out.write("    e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("    progressInfo.style.display = 'block';\r\n");
      out.write("\r\n");
      out.write("    const formData = new FormData(uploadForm);\r\n");
      out.write("    const xhr = new XMLHttpRequest();\r\n");
      out.write("\r\n");
      out.write("    xhr.open('POST', uploadForm.action, true);\r\n");
      out.write("    xhr.send(formData);\r\n");
      out.write("    // Periodically query the server for upload progress\r\n");
      out.write("    const interval = setInterval(() => {\r\n");
      out.write("        fetch('http://localhost:8080/MergeVideo/UploadServlet')\r\n");
      out.write("            .then(response => response.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("            	let uploaded = data.numFileUploaded;\r\n");
      out.write("            	let total = data.totalFileUploaded;\r\n");
      out.write("            	let pID = data.processID;\r\n");
      out.write("                if (total > 0) {\r\n");
      out.write("                    const progress = (uploaded/total) * 100;\r\n");
      out.write("                    progressBar.value = progress;\r\n");
      out.write("                    progressText.textContent = 'Uploaded: '+uploaded+' of '+total;\r\n");
      out.write("                }\r\n");
      out.write("                else{\r\n");
      out.write("                    progressText.textContent = 'Progressing';\r\n");
      out.write("                	\r\n");
      out.write("                }\r\n");
      out.write("                if (uploaded===total && uploaded){\r\n");
      out.write("                    clearInterval(interval);\r\n");
      out.write("                    mergeForm.style = \"display: block\";\r\n");
      out.write("                    processID.value = pID;\r\n");
      out.write("                    fetch('http://localhost:8080/MergeVideo/UploadServlet/Finish');\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("    }, 1000);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
