package model.BO;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.swing.plaf.ProgressBarUI;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;

public class UploadVideoManagerBO {
	private static UploadVideoManagerBO instance = null;
	private ExecutorService executorService;
    public ConcurrentHashMap<String, Integer[]> progressMap = new ConcurrentHashMap<String, Integer[]>();
    private static Object key = new Object();
    private UploadVideoManagerBO() {
		// TODO Auto-generated constructor stub
    	if (executorService == null) executorService = Executors.newFixedThreadPool(10);
    }
    
    public static UploadVideoManagerBO getInstance() {
    	if (instance == null) {
    		instance = new UploadVideoManagerBO();
    	}
    	return instance;
    }
	
	

	public void postTask(String userID, Part part, String filePath, HttpServletRequest request, HttpServletResponse response) {
		executorService.submit(()->{
			processFileUpload(userID, part, filePath, request, response);
		});
	}
    
	public void destroy() {
		if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
        }
	}
	
	private void processFileUpload(String userID, Part part, String filePath, HttpServletRequest request, HttpServletResponse response) {
        try {
            part.write(filePath); // Save the file
            System.out.println("File " + filePath + " uploaded successfully.");
            
        	Integer[] curProgress = progressMap.get(userID);
        	curProgress[0]++;
            if (curProgress[0] == curProgress[1]) {
            	response.getWriter().write("upload successful");
            }
            else {
                progressMap.put("userID", curProgress);
            }
			
        } catch (Exception e) {
            System.err.println("Error processing file: " + e.getMessage());
        }
    }
}
